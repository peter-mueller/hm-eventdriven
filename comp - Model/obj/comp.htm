<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\comp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\comp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Wed Jun 21 11:30:43 2017
<BR><P>
<H3>Maximum Stack Usage =        128 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AlarmClock_enableAlarm &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1]">Reset_Handler</a>
 <LI><a href="#[f]">T_SWI_Handler</a>
 <LI><a href="#[57]">disable_irq</a>
 <LI><a href="#[58]">enable_irq</a>
 <LI><a href="#[2]">Undef_Handler</a>
 <LI><a href="#[3]">SWI_Handler</a>
 <LI><a href="#[4]">PAbt_Handler</a>
 <LI><a href="#[5]">DAbt_Handler</a>
 <LI><a href="#[6]">IRQ_Handler</a>
 <LI><a href="#[7]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">Undef_Handler</a><BR>
 <LI><a href="#[4]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PAbt_Handler</a><BR>
 <LI><a href="#[5]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">DAbt_Handler</a><BR>
 <LI><a href="#[6]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">IRQ_Handler</a><BR>
 <LI><a href="#[7]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3a]">AlarmClock_brewing</a> from clock.o(.text) referenced from clock.o(.text)
 <LI><a href="#[35]">AlarmClock_enableAlarm</a> from clock.o(.text) referenced 2 times from clock.o(.text)
 <LI><a href="#[37]">AlarmClock_final</a> from clock.o(.text) referenced from clock.o(.text)
 <LI><a href="#[3b]">AlarmClock_setBrewStrength</a> from clock.o(.text) referenced from clock.o(.text)
 <LI><a href="#[3e]">AlarmClock_set_hour</a> from clock.o(.text) referenced from clock.o(.text)
 <LI><a href="#[3c]">AlarmClock_set_minute</a> from clock.o(.text) referenced from clock.o(.text)
 <LI><a href="#[a]">AlarmClock_showCurrentTime</a> from clock.o(.text) referenced 2 times from clock.o(.text)
 <LI><a href="#[b]">AlarmClock_timekeeping</a> from clock.o(.text) referenced 5 times from clock.o(.text)
 <LI><a href="#[5]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[c]">QHsm_top</a> from qhsm_top.o(.text) referenced from clock.o(.text)
 <LI><a href="#[1]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[26]">T0_IRQHandler</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[24]">T1_IRQHandler</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[2]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(RESET)
 <LI><a href="#[d]">fputc</a> from retarget.o(.text) referenced from printf6.o(i.__0fprintf$6)
 <LI><a href="#[d]">fputc</a> from retarget.o(.text) referenced from printf6.o(i.__0printf$6)
 <LI><a href="#[9]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[22]">uart_isr0</a> from serial.o(.text) referenced from serial.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[60]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[10]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[56]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[61]"></a>_main_clock</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[62]"></a>_main_cpp_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[63]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[64]"></a>__rt_final_cpp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[65]"></a>__rt_final_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[d]"></a>fputc</STRONG> (ARM, 44 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_char
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printf6.o(i.__0fprintf$6)
<LI> printf6.o(i.__0printf$6)
</UL>
<P><STRONG><a name="[13]"></a>getch</STRONG> (ARM, 16 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey0
</UL>

<P><STRONG><a name="[15]"></a>fgetc</STRONG> (ARM, 20 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey0
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getch
</UL>

<P><STRONG><a name="[16]"></a>_ttywrch</STRONG> (ARM, 24 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_char
</UL>

<P><STRONG><a name="[66]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>lcd_write_4bit</STRONG> (ARM, 84 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_write_4bit
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>

<P><STRONG><a name="[1b]"></a>lcd_write_cmd</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[1d]"></a>lcd_putchar</STRONG> (ARM, 24 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_putchar &rArr; lcd_write_data &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[1e]"></a>lcd_init</STRONG> (ARM, 176 bytes, Stack size 16 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_init &rArr; lcd_putchar &rArr; lcd_write_data &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1f]"></a>set_cursor</STRONG> (ARM, 52 bytes, Stack size 16 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_cursor &rArr; lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[20]"></a>lcd_clear</STRONG> (ARM, 32 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_clear &rArr; set_cursor &rArr; lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[21]"></a>lcd_print</STRONG> (ARM, 40 bytes, Stack size 8 bytes, lcd_4bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>

<P><STRONG><a name="[67]"></a>init_serial</STRONG> (ARM, 68 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>send_char</STRONG> (ARM, 36 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[68]"></a>kbhit</STRONG> (ARM, 44 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>getkey</STRONG> (ARM, 36 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>getkey0</STRONG> (ARM, 24 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getch
</UL>

<P><STRONG><a name="[23]"></a>get_char</STRONG> (ARM, 36 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr0
</UL>

<P><STRONG><a name="[22]"></a>uart_isr0</STRONG> (ARM, 44 bytes, Stack size 20 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uart_isr0
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>uart_init_0</STRONG> (ARM, 120 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[24]"></a>T1_IRQHandler</STRONG> (ARM, 64 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = T1_IRQHandler &rArr; QF_tickX_ &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>Init_Timer1</STRONG> (ARM, 60 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[26]"></a>T0_IRQHandler</STRONG> (ARM, 72 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>Timer0_Init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>timeEquals</STRONG> (ARM, 72 bytes, Stack size 8 bytes, qmbsp.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>timeAdd</STRONG> (ARM, 140 bytes, Stack size 16 bytes, qmbsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timeAdd &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_showCurrentTime
</UL>

<P><STRONG><a name="[29]"></a>BSP_Init</STRONG> (ARM, 40 bytes, Stack size 8 bytes, qmbsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_Init &rArr; lcd_clear &rArr; set_cursor &rArr; lcd_write_cmd &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer1
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_0
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cursor
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>BSP_showMsg</STRONG> (ARM, 40 bytes, Stack size 8 bytes, qmbsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_showMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_showCurrentTime
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_setBrewStrength
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_timekeeping
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_enableAlarm
</UL>

<P><STRONG><a name="[2e]"></a>BSP_showTime24H</STRONG> (ARM, 52 bytes, Stack size 16 bytes, qmbsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_showTime24H &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_showCurrentTime
</UL>

<P><STRONG><a name="[4f]"></a>QF_onStartup</STRONG> (ARM, 4 bytes, Stack size 0 bytes, qmbsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[50]"></a>QF_onIdle</STRONG> (ARM, 4 bytes, Stack size 0 bytes, qmbsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[2f]"></a>QF_onCleanup</STRONG> (ARM, 20 bytes, Stack size 8 bytes, qmbsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_stop
</UL>

<P><STRONG><a name="[30]"></a>QF_onClockTick</STRONG> (ARM, 20 bytes, Stack size 8 bytes, qmbsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
</UL>

<P><STRONG><a name="[31]"></a>Q_onAssert</STRONG> (ARM, 44 bytes, Stack size 16 bytes, qmbsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_stop
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_noTimeEvtsActiveX
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_getQueueMin
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_getPoolMin
</UL>

<P><STRONG><a name="[6c]"></a>_kbhit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, qmbsp.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_getch</STRONG> (ARM, 20 bytes, Stack size 8 bytes, qmbsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[42]"></a>AlarmClock_ctor</STRONG> (ARM, 4 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>AlarmClock_enableAlarm</STRONG> (ARM, 176 bytes, Stack size 24 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AlarmClock_enableAlarm &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_showMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>AlarmClock_final</STRONG> (ARM, 72 bytes, Stack size 16 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AlarmClock_final &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>AlarmClock_brewing</STRONG> (ARM, 80 bytes, Stack size 0 bytes, clock.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>AlarmClock_timekeeping</STRONG> (ARM, 192 bytes, Stack size 16 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AlarmClock_timekeeping &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_showMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>AlarmClock_setBrewStrength</STRONG> (ARM, 196 bytes, Stack size 16 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AlarmClock_setBrewStrength &rArr; BSP_showMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_showMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>AlarmClock_set_minute</STRONG> (ARM, 88 bytes, Stack size 0 bytes, clock.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>AlarmClock_set_hour</STRONG> (ARM, 88 bytes, Stack size 0 bytes, clock.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>AlarmClock_showCurrentTime</STRONG> (ARM, 224 bytes, Stack size 32 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AlarmClock_showCurrentTime &rArr; BSP_showTime24H &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_showTime24H
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_showMsg
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeAdd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>AlarmClock_initial</STRONG> (ARM, 80 bytes, Stack size 16 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>

<P><STRONG><a name="[9]"></a>main</STRONG> (ARM, 124 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; QF_poolInit &rArr; QMPool_init &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_ctor
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c]"></a>QHsm_top</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qhsm_top.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>QActive_get_</STRONG> (ARM, 208 bytes, Stack size 16 bytes, qa_get_.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QActive_get_ &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[45]"></a>QF_getQueueMin</STRONG> (ARM, 80 bytes, Stack size 16 bytes, qa_get_.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[52]"></a>QEQueue_init</STRONG> (ARM, 44 bytes, Stack size 0 bytes, qeq_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[46]"></a>QF_add_</STRONG> (ARM, 84 bytes, Stack size 16 bytes, qf_act.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[47]"></a>QF_remove_</STRONG> (ARM, 88 bytes, Stack size 16 bytes, qf_act.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_stop
</UL>

<P><STRONG><a name="[4e]"></a>QF_bzero</STRONG> (ARM, 36 bytes, Stack size 0 bytes, qf_act.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
</UL>

<P><STRONG><a name="[48]"></a>QF_gc</STRONG> (ARM, 132 bytes, Stack size 16 bytes, qf_gc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[36]"></a>QF_newX_</STRONG> (ARM, 200 bytes, Stack size 24 bytes, qf_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_enableAlarm
</UL>

<P><STRONG><a name="[41]"></a>QF_poolInit</STRONG> (ARM, 180 bytes, Stack size 16 bytes, qf_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = QF_poolInit &rArr; QMPool_init &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>QF_tickX_</STRONG> (ARM, 312 bytes, Stack size 24 bytes, qf_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QF_tickX_ &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onClockTick
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>QF_noTimeEvtsActiveX</STRONG> (ARM, 104 bytes, Stack size 16 bytes, qf_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[4a]"></a>QMPool_get</STRONG> (ARM, 220 bytes, Stack size 24 bytes, qmp_get.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QMPool_get &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
</UL>

<P><STRONG><a name="[4d]"></a>QF_getPoolMin</STRONG> (ARM, 88 bytes, Stack size 16 bytes, qmp_get.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[4b]"></a>QMPool_init</STRONG> (ARM, 252 bytes, Stack size 32 bytes, qmp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QMPool_init &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
</UL>

<P><STRONG><a name="[49]"></a>QMPool_put</STRONG> (ARM, 112 bytes, Stack size 16 bytes, qmp_put.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QMPool_put &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>

<P><STRONG><a name="[38]"></a>QTimeEvt_armX</STRONG> (ARM, 172 bytes, Stack size 24 bytes, qte_arm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QTimeEvt_armX &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_timekeeping
</UL>

<P><STRONG><a name="[39]"></a>QTimeEvt_disarm</STRONG> (ARM, 60 bytes, Stack size 16 bytes, qte_darm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QTimeEvt_disarm
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_timekeeping
</UL>

<P><STRONG><a name="[40]"></a>QF_init</STRONG> (ARM, 60 bytes, Stack size 8 bytes, qvanilla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QF_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>QF_stop</STRONG> (ARM, 16 bytes, Stack size 8 bytes, qvanilla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onCleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_final
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[43]"></a>QF_run</STRONG> (ARM, 128 bytes, Stack size 0 bytes, qvanilla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QF_run &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; QF_stop &rArr; QF_onCleanup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onIdle
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>QActive_start_</STRONG> (ARM, 132 bytes, Stack size 32 bytes, qvanilla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[53]"></a>QActive_stop</STRONG> (ARM, 24 bytes, Stack size 8 bytes, qvanilla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_idivmod</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeAdd (via Veneer)
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_initial (via Veneer)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClock_showCurrentTime (via Veneer)
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_uidivmod</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[11]"></a>__scatterload</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload (via Veneer)
</UL>

<P><STRONG><a name="[71]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>T_SWI_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, swi_interrup.o(SWI_Area))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>

<P><STRONG><a name="[57]"></a>disable_irq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, swi_interrup.o(SWI_Area))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_SWI_Handler
</UL>

<P><STRONG><a name="[58]"></a>enable_irq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, swi_interrup.o(SWI_Area))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_SWI_Handler
</UL>

<P><STRONG><a name="[59]"></a>__0fprintf$6</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf6.o(i.__0fprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[72]"></a>__1fprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0fprintf$6), UNUSED)

<P><STRONG><a name="[32]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0fprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert (via Veneer)
</UL>

<P><STRONG><a name="[5b]"></a>__0printf$6</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[73]"></a>__1printf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)

<P><STRONG><a name="[2d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onCleanup (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_showTime24H (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_showMsg (via Veneer)
</UL>

<P><STRONG><a name="[5c]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printf1.o(i.__ARM_common_call_via_r2), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[55]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5f]"></a>__ARM_common_call_via_r6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printfb.o(i.__ARM_common_call_via_r6), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>

<P><STRONG><a name="[74]"></a>__scatterload_copy</STRONG> (ARM, 28 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[75]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[76]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>delay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, lcd_4bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_status
</UL>

<P><STRONG><a name="[17]"></a>lcd_read_status</STRONG> (ARM, 188 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>

<P><STRONG><a name="[19]"></a>wait_while_busy</STRONG> (ARM, 32 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>

<P><STRONG><a name="[1c]"></a>lcd_write_data</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd_4bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_write_data &rArr; wait_while_busy &rArr; lcd_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_4bit
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_while_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>

<P><STRONG><a name="[5a]"></a>_printf_core</STRONG> (Thumb, 792 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$6
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf$6
</UL>

<P><STRONG><a name="[5e]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5d]"></a>_printf_pre_padding</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
