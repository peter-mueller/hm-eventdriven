; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\qmbsp.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\qmbsp.d --apcs=interwork -O0 --diag_suppress=9931 -I.\src -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Frameworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Frameworks\Quantum\qpc_5.3.1\qpc\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\qmbsp.crf src\qmbsp.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  BSP_Init PROC
;;;11     /*..........................................................................*/
;;;12     void BSP_Init( ) {
000000  e92d4010          PUSH     {r4,lr}
;;;13      Init_Timer1( );
000004  ebfffffe          BL       Init_Timer1
;;;14     //	Init_timer0();
;;;15                                    /* Init UART                   */
;;;16       uart_init_0 ( );
000008  ebfffffe          BL       uart_init_0
;;;17       lcd_init();
00000c  ebfffffe          BL       lcd_init
;;;18       lcd_clear();
000010  ebfffffe          BL       lcd_clear
;;;19       set_cursor (0, 1);
000014  e3a01001          MOV      r1,#1
000018  e3a00000          MOV      r0,#0
00001c  ebfffffe          BL       set_cursor
;;;20     }
000020  e8bd4010          POP      {r4,lr}
000024  e12fff1e          BX       lr
;;;21     /*..........................................................................*/
                          ENDP

                  BSP_showMsg PROC
;;;22     void BSP_showMsg(char const *str) {
000028  e92d4010          PUSH     {r4,lr}
00002c  e1a04000          MOV      r4,r0
;;;23         printf(str);
000030  e1a00004          MOV      r0,r4
000034  ebfffffe          BL       __2printf
;;;24         printf("\n");
000038  e28f0fc5          ADR      r0,|L1.852|
00003c  ebfffffe          BL       __2printf
;;;25         fflush(stdout);
000040  e59f0310          LDR      r0,|L1.856|
000044  ebfffffe          BL       fflush
;;;26     }
000048  e8bd4010          POP      {r4,lr}
00004c  e12fff1e          BX       lr
;;;27     /*..........................................................................*/
                          ENDP

                  BSP_showTime24H PROC
;;;28     void BSP_showTime24H(char const *str, uint32_t time, uint32_t base) {
000050  e92d41f0          PUSH     {r4-r8,lr}
000054  e1a06000          MOV      r6,r0
000058  e1a04001          MOV      r4,r1
00005c  e1a05002          MOV      r5,r2
;;;29         printf(str);
000060  e1a00006          MOV      r0,r6
000064  ebfffffe          BL       __2printf
;;;30         printf("%02d:%02d\n", (int)(time / base), (int)(time % base));
000068  e1a01005          MOV      r1,r5
00006c  e1a00004          MOV      r0,r4
000070  ebfffffe          BL       __aeabi_uidivmod
000074  e1a07001          MOV      r7,r1
000078  e1a01005          MOV      r1,r5
00007c  e1a00004          MOV      r0,r4
000080  ebfffffe          BL       __aeabi_uidivmod
000084  e1a08000          MOV      r8,r0
000088  e1a02007          MOV      r2,r7
00008c  e1a01008          MOV      r1,r8
000090  e28f0fb1          ADR      r0,|L1.860|
000094  ebfffffe          BL       __2printf
;;;31         fflush(stdout);
000098  e59f02b8          LDR      r0,|L1.856|
00009c  ebfffffe          BL       fflush
;;;32     }
0000a0  e8bd41f0          POP      {r4-r8,lr}
0000a4  e12fff1e          BX       lr
;;;33     /*..........................................................................*/
                          ENDP

                  BSP_showTime12H PROC
;;;34     void BSP_showTime12H(char const *str, uint32_t time, uint32_t base) {
0000a8  e92d47f0          PUSH     {r4-r10,lr}
0000ac  e1a06000          MOV      r6,r0
0000b0  e1a04001          MOV      r4,r1
0000b4  e1a05002          MOV      r5,r2
;;;35         uint32_t h = time / base;
0000b8  e1a01005          MOV      r1,r5
0000bc  e1a00004          MOV      r0,r4
0000c0  ebfffffe          BL       __aeabi_uidivmod
0000c4  e1a0a000          MOV      r10,r0
;;;36     
;;;37         printf(str);
0000c8  e1a00006          MOV      r0,r6
0000cc  ebfffffe          BL       __2printf
;;;38         printf("%02d:%02d %s\n", (h % 12) ? (h % 12) : 12,
0000d0  e3a0100c          MOV      r1,#0xc
0000d4  e1a0000a          MOV      r0,r10
0000d8  ebfffffe          BL       __aeabi_uidivmod
0000dc  e3500000          CMP      r0,#0
0000e0  0a000001          BEQ      |L1.236|
;;;39                time % base, (h / 12) ? "PM" : "AM");
0000e4  e28f0f9f          ADR      r0,|L1.872|
0000e8  ea000000          B        |L1.240|
                  |L1.236|
0000ec  e28f0f9e          ADR      r0,|L1.876|
                  |L1.240|
0000f0  e1a07000          MOV      r7,r0
0000f4  e1a01005          MOV      r1,r5
0000f8  e1a00004          MOV      r0,r4
0000fc  ebfffffe          BL       __aeabi_uidivmod
000100  e1a09001          MOV      r9,r1
000104  e3a0100c          MOV      r1,#0xc
000108  e1a0000a          MOV      r0,r10
00010c  ebfffffe          BL       __aeabi_uidivmod
000110  e3510000          CMP      r1,#0
000114  0a000003          BEQ      |L1.296|
000118  e3a0100c          MOV      r1,#0xc               ;38
00011c  e1a0000a          MOV      r0,r10                ;38
000120  ebfffffe          BL       __aeabi_uidivmod
000124  ea000000          B        |L1.300|
                  |L1.296|
000128  e3a0100c          MOV      r1,#0xc               ;38
                  |L1.300|
00012c  e1a08001          MOV      r8,r1                 ;38
000130  e1a03007          MOV      r3,r7                 ;38
000134  e1a02009          MOV      r2,r9                 ;38
000138  e28f0e23          ADR      r0,|L1.880|
00013c  ebfffffe          BL       __2printf
;;;40         fflush(stdout);
000140  e59f0210          LDR      r0,|L1.856|
000144  ebfffffe          BL       fflush
;;;41     }
000148  e8bd47f0          POP      {r4-r10,lr}
00014c  e12fff1e          BX       lr
;;;42     /*..........................................................................*/
                          ENDP

                  QF_onStartup PROC
;;;43     void QF_onStartup(void) {
000150  e12fff1e          BX       lr
;;;44        // QF_setTickRate(BSP_TICKS_PER_SEC); /* set the desired tick rate */
;;;45     }
;;;46     
                          ENDP

                  QF_onIdle PROC
;;;47     void QF_onIdle(void)	  {
000154  e12fff1e          BX       lr
;;;48     	 ;
;;;49     }
;;;50     
                          ENDP

                  QF_onCleanup PROC
;;;51     /*..........................................................................*/
;;;52     void QF_onCleanup(void) {
000158  e92d4010          PUSH     {r4,lr}
;;;53         printf("\nBye! Bye!\n");
00015c  e28f0f87          ADR      r0,|L1.896|
000160  ebfffffe          BL       __2printf
;;;54     }
000164  e8bd4010          POP      {r4,lr}
000168  e12fff1e          BX       lr
;;;55     /*..........................................................................*/
                          ENDP

                  _getch PROC
;;;127    
;;;128    int _getch()
00016c  e92d4010          PUSH     {r4,lr}
;;;129    
;;;130    {
;;;131    	 FILE *f;
;;;132     return	 ( fgetc(  f) );
000170  e1a00004          MOV      r0,r4
000174  ebfffffe          BL       fgetc
000178  e8bd4010          POP      {r4,lr}
;;;133    }
00017c  e12fff1e          BX       lr
;;;134    	
                          ENDP

                  BSP_onKeyboardInput PROC
;;;62     /*..........................................................................*/
;;;63     void BSP_onKeyboardInput(uint8_t key) {
000180  e92d4070          PUSH     {r4-r6,lr}
000184  e1a04000          MOV      r4,r0
;;;64         switch (key) {
000188  e3540036          CMP      r4,#0x36
00018c  0a000048          BEQ      |L1.692|
000190  ca000010          BGT      |L1.472|
000194  e3540032          CMP      r4,#0x32
000198  0a000041          BEQ      |L1.676|
00019c  ca000006          BGT      |L1.444|
0001a0  e354001b          CMP      r4,#0x1b
0001a4  0a00009b          BEQ      |L1.1048|
0001a8  e3540030          CMP      r4,#0x30
0001ac  0a000055          BEQ      |L1.776|
0001b0  e3540031          CMP      r4,#0x31
0001b4  1a0000a8          BNE      |L1.1116|
0001b8  ea000037          B        |L1.668|
                  |L1.444|
0001bc  e3540033          CMP      r4,#0x33
0001c0  0a000038          BEQ      |L1.680|
0001c4  e3540034          CMP      r4,#0x34
0001c8  0a000037          BEQ      |L1.684|
0001cc  e3540035          CMP      r4,#0x35
0001d0  1a0000a1          BNE      |L1.1116|
0001d4  ea000035          B        |L1.688|
                  |L1.472|
0001d8  e3540061          CMP      r4,#0x61
0001dc  0a00006b          BEQ      |L1.912|
0001e0  ca000006          BGT      |L1.512|
0001e4  e3540037          CMP      r4,#0x37
0001e8  0a000032          BEQ      |L1.696|
0001ec  e3540038          CMP      r4,#0x38
0001f0  0a000031          BEQ      |L1.700|
0001f4  e3540039          CMP      r4,#0x39
0001f8  1a000097          BNE      |L1.1116|
0001fc  ea00002f          B        |L1.704|
                  |L1.512|
000200  e3540062          CMP      r4,#0x62
000204  0a000072          BEQ      |L1.980|
000208  e3540066          CMP      r4,#0x66
00020c  0a000011          BEQ      |L1.600|
000210  e354006f          CMP      r4,#0x6f
000214  1a000090          BNE      |L1.1116|
;;;65             case 'o': { /* 'o': Alarm on event? */
;;;66                 QACTIVE_POST(APP_alarmClock,
000218  e3a02006          MOV      r2,#6
00021c  e3a01000          MOV      r1,#0
000220  e3a00004          MOV      r0,#4
000224  ebfffffe          BL       QF_newX_
000228  e1a05000          MOV      r5,r0
00022c  e59f0158          LDR      r0,|L1.908|
000230  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
000234  e5900000          LDR      r0,[r0,#0]
000238  e3a02000          MOV      r2,#0
00023c  e1a01005          MOV      r1,r5
000240  e590300c          LDR      r3,[r0,#0xc]
000244  e59f0140          LDR      r0,|L1.908|
000248  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
00024c  e1a0e00f          MOV      lr,pc
000250  e12fff13          BX       r3
;;;67                              Q_NEW(QEvt, ALARM_ON_SIG), (void *)0);
;;;68                 break;
000254  ea000080          B        |L1.1116|
                  |L1.600|
;;;69             }
;;;70             case 'f': { /* 'f': Alarm off event? */
000258  e1a00000          MOV      r0,r0
;;;71                 QACTIVE_POST(APP_alarmClock,
00025c  e3a02007          MOV      r2,#7
000260  e3a01000          MOV      r1,#0
000264  e3a00004          MOV      r0,#4
000268  ebfffffe          BL       QF_newX_
00026c  e1a05000          MOV      r5,r0
000270  e59f0114          LDR      r0,|L1.908|
000274  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
000278  e5900000          LDR      r0,[r0,#0]
00027c  e3a02000          MOV      r2,#0
000280  e1a01005          MOV      r1,r5
000284  e590300c          LDR      r3,[r0,#0xc]
000288  e59f00fc          LDR      r0,|L1.908|
00028c  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
000290  e1a0e00f          MOV      lr,pc
000294  e12fff13          BX       r3
;;;72                              Q_NEW(QEvt, ALARM_OFF_SIG), (void *)0);
;;;73                 break;
000298  ea00006f          B        |L1.1116|
                  |L1.668|
;;;74             }
;;;75             case '1':   /* '1' */
00029c  e1a00000          MOV      r0,r0
;;;76             case '2':   /* '2' */
0002a0  e1a00000          MOV      r0,r0
                  |L1.676|
;;;77             case '3':   /* '3' */
0002a4  e1a00000          MOV      r0,r0
                  |L1.680|
;;;78             case '4':   /* '4' */
0002a8  e1a00000          MOV      r0,r0
                  |L1.684|
;;;79             case '5':   /* '5' */
0002ac  e1a00000          MOV      r0,r0
                  |L1.688|
;;;80             case '6':   /* '6' */
0002b0  e1a00000          MOV      r0,r0
                  |L1.692|
;;;81             case '7':   /* '7' */
0002b4  e1a00000          MOV      r0,r0
                  |L1.696|
;;;82             case '8':   /* '8' */
0002b8  e1a00000          MOV      r0,r0
                  |L1.700|
;;;83             case '9': { /* '9' */
0002bc  e1a00000          MOV      r0,r0
                  |L1.704|
;;;84                 SetEvt *e = Q_NEW(SetEvt, ALARM_SET_SIG);
0002c0  e3a02005          MOV      r2,#5
0002c4  e3a01000          MOV      r1,#0
0002c8  e3a00006          MOV      r0,#6
0002cc  ebfffffe          BL       QF_newX_
0002d0  e1a05000          MOV      r5,r0
;;;85                 e->digit = (uint8_t)(key - '0');
0002d4  e2440030          SUB      r0,r4,#0x30
0002d8  e5c50004          STRB     r0,[r5,#4]
;;;86                 QACTIVE_POST(APP_alarmClock, (QEvt *)e, (void *)0);
0002dc  e59f00a8          LDR      r0,|L1.908|
0002e0  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
0002e4  e5900000          LDR      r0,[r0,#0]
0002e8  e3a02000          MOV      r2,#0
0002ec  e1a01005          MOV      r1,r5
0002f0  e590300c          LDR      r3,[r0,#0xc]
0002f4  e59f0090          LDR      r0,|L1.908|
0002f8  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
0002fc  e1a0e00f          MOV      lr,pc
000300  e12fff13          BX       r3
;;;87                 break;
000304  ea000054          B        |L1.1116|
                  |L1.776|
;;;88             }
;;;89             case '0': { /* '0' */
000308  e1a00000          MOV      r0,r0
;;;90                 SetEvt *e = Q_NEW(SetEvt, ALARM_SET_SIG);
00030c  e3a02005          MOV      r2,#5
000310  e3a01000          MOV      r1,#0
000314  e3a00006          MOV      r0,#6
000318  ebfffffe          BL       QF_newX_
00031c  e1a05000          MOV      r5,r0
;;;91                 e->digit = 0;
000320  e3a00000          MOV      r0,#0
000324  e5c50004          STRB     r0,[r5,#4]
;;;92                 QACTIVE_POST(APP_alarmClock, (QEvt *)e, (void *)0);
000328  e59f005c          LDR      r0,|L1.908|
00032c  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
000330  e5900000          LDR      r0,[r0,#0]
000334  e3a02000          MOV      r2,#0
000338  e1a01005          MOV      r1,r5
00033c  e590300c          LDR      r3,[r0,#0xc]
000340  e59f0044          LDR      r0,|L1.908|
000344  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
000348  e1a0e00f          MOV      lr,pc
00034c  e12fff13          BX       r3
;;;93                 break;
000350  ea000041          B        |L1.1116|
                  |L1.852|
000354  0a00              DCB      "\n",0
000356  00                DCB      0
000357  00                DCB      0
                  |L1.856|
                          DCD      __stdout
                  |L1.860|
00035c  25303264          DCB      "%02d:%02d\n",0
000360  3a253032
000364  640a00  
000367  00                DCB      0
                  |L1.872|
000368  504d00            DCB      "PM",0
00036b  00                DCB      0
                  |L1.876|
00036c  414d00            DCB      "AM",0
00036f  00                DCB      0
                  |L1.880|
000370  25303264          DCB      "%02d:%02d %s\n",0
000374  3a253032
000378  64202573
00037c  0a00    
00037e  00                DCB      0
00037f  00                DCB      0
                  |L1.896|
000380  0a427965          DCB      "\nBye! Bye!\n",0
000384  21204279
000388  65210a00
                  |L1.908|
                          DCD      APP_alarmClock
                  |L1.912|
;;;94             }
;;;95             case 'a': { /* 'a': Clock 12H event? */
000390  e1a00000          MOV      r0,r0
;;;96                 QACTIVE_POST(APP_alarmClock,
000394  e3a02009          MOV      r2,#9
000398  e3a01000          MOV      r1,#0
00039c  e3a00004          MOV      r0,#4
0003a0  ebfffffe          BL       QF_newX_
0003a4  e1a05000          MOV      r5,r0
0003a8  e51f0024          LDR      r0,|L1.908|
0003ac  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
0003b0  e5900000          LDR      r0,[r0,#0]
0003b4  e3a02000          MOV      r2,#0
0003b8  e1a01005          MOV      r1,r5
0003bc  e590300c          LDR      r3,[r0,#0xc]
0003c0  e51f003c          LDR      r0,|L1.908|
0003c4  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
0003c8  e1a0e00f          MOV      lr,pc
0003cc  e12fff13          BX       r3
;;;97                              Q_NEW(QEvt, CLOCK_12H_SIG), (void *)0);
;;;98                 break;
0003d0  ea000021          B        |L1.1116|
                  |L1.980|
;;;99             }
;;;100            case 'b': { /* 'b': Clock 24H event? */
0003d4  e1a00000          MOV      r0,r0
;;;101                QACTIVE_POST(APP_alarmClock,
0003d8  e3a0200a          MOV      r2,#0xa
0003dc  e3a01000          MOV      r1,#0
0003e0  e3a00004          MOV      r0,#4
0003e4  ebfffffe          BL       QF_newX_
0003e8  e1a05000          MOV      r5,r0
0003ec  e51f0068          LDR      r0,|L1.908|
0003f0  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
0003f4  e5900000          LDR      r0,[r0,#0]
0003f8  e3a02000          MOV      r2,#0
0003fc  e1a01005          MOV      r1,r5
000400  e590300c          LDR      r3,[r0,#0xc]
000404  e51f0080          LDR      r0,|L1.908|
000408  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
00040c  e1a0e00f          MOV      lr,pc
000410  e12fff13          BX       r3
;;;102                             Q_NEW(QEvt, CLOCK_24H_SIG), (void *)0);
;;;103                break;
000414  ea000010          B        |L1.1116|
                  |L1.1048|
;;;104            }
;;;105            case '\33': { /* ESC pressed? */
000418  e1a00000          MOV      r0,r0
;;;106                QACTIVE_POST(APP_alarmClock,
00041c  e3a0200c          MOV      r2,#0xc
000420  e3a01000          MOV      r1,#0
000424  e3a00004          MOV      r0,#4
000428  ebfffffe          BL       QF_newX_
00042c  e1a05000          MOV      r5,r0
000430  e51f00ac          LDR      r0,|L1.908|
000434  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
000438  e5900000          LDR      r0,[r0,#0]
00043c  e3a02000          MOV      r2,#0
000440  e1a01005          MOV      r1,r5
000444  e590300c          LDR      r3,[r0,#0xc]
000448  e51f00c4          LDR      r0,|L1.908|
00044c  e5900000          LDR      r0,[r0,#0]  ; APP_alarmClock
000450  e1a0e00f          MOV      lr,pc
000454  e12fff13          BX       r3
;;;107                             Q_NEW(QEvt, TERMINATE_SIG), (void *)0);
;;;108                break;
000458  e1a00000          MOV      r0,r0
                  |L1.1116|
00045c  e1a00000          MOV      r0,r0                 ;68
;;;109            }
;;;110        }
;;;111    }
000460  e8bd4070          POP      {r4-r6,lr}
000464  e12fff1e          BX       lr
;;;112    
                          ENDP

                  _kbhit PROC
;;;119    
;;;120    int _kbhit(void ) {
000468  e3a000ff          MOV      r0,#0xff
;;;121    
;;;122    	int i;
;;;123    	 i = 0xFF;
;;;124    	 return(i);
;;;125    }
00046c  e12fff1e          BX       lr
;;;126    
                          ENDP

                  QF_onClockTick PROC
;;;55     /*..........................................................................*/
;;;56     void QF_onClockTick(void) {
000470  e92d4010          PUSH     {r4,lr}
;;;57         QF_TICK(&l_clock_tick); /* perform the QF clock tick processing */
000474  e3a00000          MOV      r0,#0
000478  ebfffffe          BL       QF_tickX_
;;;58         if (_kbhit()) { /* any key pressed? */
00047c  ebfffffe          BL       _kbhit
000480  e3500000          CMP      r0,#0
000484  0a000003          BEQ      |L1.1176|
;;;59             BSP_onKeyboardInput(_getch());
000488  ebfffffe          BL       _getch
00048c  e20040ff          AND      r4,r0,#0xff
000490  e1a00004          MOV      r0,r4
000494  ebfffffe          BL       BSP_onKeyboardInput
                  |L1.1176|
;;;60         }
;;;61     }
000498  e8bd4010          POP      {r4,lr}
00049c  e12fff1e          BX       lr
;;;62     /*..........................................................................*/
                          ENDP

                  Q_onAssert PROC
;;;113    /*..........................................................................*/
;;;114    void Q_onAssert(char const * const file, int line) {
0004a0  e92d4070          PUSH     {r4-r6,lr}
0004a4  e1a04000          MOV      r4,r0
0004a8  e1a05001          MOV      r5,r1
;;;115        fprintf(stderr, "Assertion failed in %s, line %d", file, line);
0004ac  e1a03005          MOV      r3,r5
0004b0  e1a02004          MOV      r2,r4
0004b4  e28f1010          ADR      r1,|L1.1228|
0004b8  e59f002c          LDR      r0,|L1.1260|
0004bc  ebfffffe          BL       __2fprintf
;;;116        QF_stop();
0004c0  ebfffffe          BL       QF_stop
;;;117    }
0004c4  e8bd4070          POP      {r4-r6,lr}
0004c8  e12fff1e          BX       lr
;;;118    
                          ENDP

                  |L1.1228|
0004cc  41737365          DCB      "Assertion failed in %s, line %d",0
0004d0  7274696f
0004d4  6e206661
0004d8  696c6564
0004dc  20696e20
0004e0  25732c20
0004e4  6c696e65
0004e8  20256400
                  |L1.1260|
                          DCD      __stderr

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Q_this_module_
000000  7372635c          DCB      0x73,0x72,0x63,0x5c
000004  716d6273          DCB      0x71,0x6d,0x62,0x73
000008  702e6300          DCB      0x70,0x2e,0x63,0x00
