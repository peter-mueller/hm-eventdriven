; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\timer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\timer.d --apcs=interwork -O0 --diag_suppress=9931 -I.\src -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Frameworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Frameworks\Quantum\qpc_5.3.1\qpc\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\timer.crf bsp\timer.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  T1_IRQHandler PROC
                  |L1.0|
;;;7      
;;;8       __irq void T1_IRQHandler(void ) {
000000  e92d500f          PUSH     {r0-r3,r12,lr}
;;;9      
;;;10     
;;;11     
;;;12     #ifdef QM_TICK
;;;13     #ifdef QK
;;;14      	__disable_irq(); 
;;;15       	  ++QK_intNest_; 
;;;16     #endif  
;;;17     
;;;18     QF_INT_UNLOCK();
000004  e10f0000          MRS      r0,APSR ; formerly CPSR
000008  e3c00080          BIC      r0,r0,#0x80
00000c  e121f000          MSR      CPSR_c,r0
;;;19     										/* ACK Timer1 int */
;;;20     
;;;21     	QF_tick();
000010  e3a00000          MOV      r0,#0
000014  ebfffffe          BL       QF_tickX_
;;;22     
;;;23     	QF_INT_LOCK(); 
000018  e10f0000          MRS      r0,APSR ; formerly CPSR
00001c  e3800080          ORR      r0,r0,#0x80
000020  e121f000          MSR      CPSR_c,r0
;;;24     #ifdef QK 
;;;25     	   --QK_intNest_;
;;;26     	   if (   QK_intNest_ ==0) 
;;;27     	   		QK_schedule_();
;;;28     #endif
;;;29     		 
;;;30     #endif 
;;;31      	
;;;32     	
;;;33     										/* ACK Timer1 int */
;;;34     
;;;35     
;;;36     	
;;;37     
;;;38     	  T1IR        = 1;                      /* Clear interrupt flag               */
000024  e3a00001          MOV      r0,#1
000028  e59f10d0          LDR      r1,|L1.256|
00002c  e5810000          STR      r0,[r1,#0]
;;;39     
;;;40         VICVectAddr = 0;                      /* Acknowledge Interrupt              */
000030  e3a00000          MOV      r0,#0
000034  e5000100          STR      r0,[r0,#-0x100]
;;;41     }
000038  e8bd500f          POP      {r0-r3,r12,lr}
00003c  e25ef004          SUBS     pc,lr,#4
;;;42     
                          ENDP

                  Init_Timer1 PROC
;;;44     
;;;45     void Init_Timer1(void )	  {
000040  e59f00bc          LDR      r0,|L1.260|
;;;46     
;;;47     
;;;48      /* Enable and setup timer interrupt, start timer  
;;;49                                */
;;;50       T1MR0         = 11999;                       /* 1msec = 12000-1 at 12.0 MHz */
000044  e59f10b4          LDR      r1,|L1.256|
000048  e5810018          STR      r0,[r1,#0x18]
;;;51       T1MCR         = 3;                           /* Interrupt and Reset on MR0  */
00004c  e3a00003          MOV      r0,#3
000050  e5810014          STR      r0,[r1,#0x14]
;;;52       T1TCR         = 1;                           /* Timer0 Enable               */
000054  e3a00001          MOV      r0,#1
000058  e5810004          STR      r0,[r1,#4]
;;;53       VICVectAddr5  = (unsigned long)T1_IRQHandler;/* Set Interrupt Vector        */
00005c  e24f0064          ADR      r0,|L1.0|
000060  e3a01000          MOV      r1,#0
000064  e5010eec          STR      r0,[r1,#-0xeec]
;;;54       VICVectCntl5  = 15;                           /* use it for Timer1 Priority  */
000068  e3a0000f          MOV      r0,#0xf
00006c  e5010dec          STR      r0,[r1,#-0xdec]
;;;55       VICIntEnable  = (1  << 5);                   /* Enable Timer0 Interrupt     */
000070  e3a00020          MOV      r0,#0x20
000074  e5010ff0          STR      r0,[r1,#-0xff0]
;;;56     
;;;57       
;;;58     
;;;59     }
000078  e12fff1e          BX       lr
;;;60     
                          ENDP

                  T0_IRQHandler PROC
                  |L1.124|
;;;64     /* Timer0 IRQ: Executed periodically   use to control ad   */
;;;65     __irq void T0_IRQHandler (void) {
00007c  e92d0003          PUSH     {r0,r1}
;;;66      
;;;67      static int clk_cntr;
;;;68     
;;;69     
;;;70       clk_cntr++;
000080  e59f0080          LDR      r0,|L1.264|
000084  e5900000          LDR      r0,[r0,#0]  ; clk_cntr
000088  e2800001          ADD      r0,r0,#1
00008c  e59f1074          LDR      r1,|L1.264|
000090  e5810000          STR      r0,[r1,#0]  ; clk_cntr
;;;71       
;;;72     	
;;;73       AD0CR |= 0x01000000;                  /* Start A/D Conversion               */
000094  e59f0070          LDR      r0,|L1.268|
000098  e5900000          LDR      r0,[r0,#0]
00009c  e3800401          ORR      r0,r0,#0x1000000
0000a0  e59f1064          LDR      r1,|L1.268|
0000a4  e5810000          STR      r0,[r1,#0]
;;;74     
;;;75       T0IR        = 1;                      /* Clear interrupt flag               */
0000a8  e3a00001          MOV      r0,#1
0000ac  e2411803          SUB      r1,r1,#0x30000
0000b0  e5810000          STR      r0,[r1,#0]
;;;76       VICVectAddr = 0;                      /* Acknowledge Interrupt              */
0000b4  e3a00000          MOV      r0,#0
0000b8  e5000100          STR      r0,[r0,#-0x100]
;;;77     }
0000bc  e8bd0003          POP      {r0,r1}
0000c0  e25ef004          SUBS     pc,lr,#4
;;;78     
                          ENDP

                  Timer0_Init PROC
;;;79     
;;;80     void  Timer0_Init(void )  {
0000c4  e59f0038          LDR      r0,|L1.260|
;;;81     	
;;;82     	
;;;83       /* Enable and setup timer interrupt, start timer                            */
;;;84       T0MR0         = 11999;                       /* 1msec = 12000-1 at 12.0 MHz */
0000c8  e59f1040          LDR      r1,|L1.272|
0000cc  e5810018          STR      r0,[r1,#0x18]
;;;85       T0MCR         = 3;                           /* Interrupt and Reset on MR0  */
0000d0  e3a00003          MOV      r0,#3
0000d4  e5810014          STR      r0,[r1,#0x14]
;;;86       T0TCR         = 1;                           /* Timer0 Enable               */
0000d8  e3a00001          MOV      r0,#1
0000dc  e5810004          STR      r0,[r1,#4]
;;;87       VICVectAddr4  = (unsigned long)T0_IRQHandler;/* Set Interrupt Vector        */
0000e0  e24f006c          ADR      r0,|L1.124|
0000e4  e3a01000          MOV      r1,#0
0000e8  e5010ef0          STR      r0,[r1,#-0xef0]
;;;88       VICVectCntl4  = 15;                          /* use it for Timer0 Interrupt */
0000ec  e3a0000f          MOV      r0,#0xf
0000f0  e5010df0          STR      r0,[r1,#-0xdf0]
;;;89       VICIntEnable  = (1  << 4);                   /* Enable Timer0 Interrupt     */
0000f4  e3a00010          MOV      r0,#0x10
0000f8  e5010ff0          STR      r0,[r1,#-0xff0]
;;;90     
;;;91     	
;;;92     }
0000fc  e12fff1e          BX       lr
                          ENDP

                  |L1.256|
                          DCD      0xe0008000
                  |L1.260|
                          DCD      0x00002edf
                  |L1.264|
                          DCD      clk_cntr
                  |L1.268|
                          DCD      0xe0034000
                  |L1.272|
                          DCD      0xe0004000

                          AREA ||.data||, DATA, ALIGN=2

                  clk_cntr
                          DCD      0x00000000
