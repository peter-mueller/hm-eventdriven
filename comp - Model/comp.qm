<?xml version="1.0" encoding="UTF-8"?>
<model version="3.0.1">
 <documentation>Dining Philosopher Problem example

NOTE: Requries QP5.</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="TimeEvt" superclass="qpc::QEvt"/>
  <class name="ADEvt" superclass="qpc::QEvt">
   <attribute name="value" type="short" visibility="0x00" properties="0x00"/>
  </class>
 </package>
 <package name="Components" stereotype="0x02">
  <class name="Alarm" superclass="qpc::QHsm">
   <documentation>Alarm &quot;Orthogonal Component&quot;</documentation>
   <attribute name="time" type="RTC_T" visibility="0x02" properties="0x00"/>
   <operation name="ctor" type="void" visibility="0x00" properties="0x00">
    <code>QHsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Alarm_initial));</code>
   </operation>
   <statechart>
    <initial target="../1">
     <action>Set_RTC(&amp;(me-&gt;time));

(void)e; /* avoid compiler warning about unused parameter */</action>
     <initial_glyph conn="2,3,5,1,36,5,-4">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <tran trig="ALARM_ON" target="../../2">
      <tran_glyph conn="2,15,3,0,18,9">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,32,15"/>
    </state>
    <state name="on">
     <tran trig="ALARM_OFF" target="../../1">
      <tran_glyph conn="2,32,3,1,38,-21,-6">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TIME">
      <choice>
       <guard>true</guard>
       <action>BSP_showMsg(&quot;ALARM!!!&quot;);

/* asynchronously post the event to the container AO */
QACTIVE_POST(APP_alarmClock, Q_NEW(QEvt, ALARM_SIG), me);</action>
       <choice_glyph conn="16,40,5,-1,12">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,40,3,-1,14">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,24,32,20"/>
    </state>
    <state_diagram size="46,48"/>
   </statechart>
  </class>
  <class name="AlarmClock" superclass="qpc::QActive">
   <documentation>Alarm clock &quot;Container&quot;</documentation>
   <attribute name="alarm" type="Alarm" visibility="0x02" properties="0x00"/>
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="adval" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="strength" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="current" type="RTC_T" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <action>Set_RTC(&amp;(me-&gt;current));
Write_RTC(&amp;(me-&gt;current));

me-&gt;strength = 0U;
me-&gt;adval = 0U;

(void)e; /* avoid compiler warning about unused parameter */

/* (!) trigger the initial transition in the component */
Alarm_init(&amp;me-&gt;alarm);</action>
     <initial_glyph conn="2,3,5,0,12,3">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="timekeeping">
     <entry>/* periodic timeout every second */
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_SEC,
                            BSP_TICKS_PER_SEC);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <initial target="../4">
      <initial_glyph conn="5,16,5,3,-2,21,1">
       <action box="0,2,6,2"/>
      </initial_glyph>
     </initial>
     <tran trig="ALARM" target="../../2">
      <action>BSP_showMsg(&quot;Wake up!!!&quot;);</action>
      <tran_glyph conn="2,28,3,3,66">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TERMINATE" target="../../3">
      <action>BSP_showMsg(&quot;--&gt; final&quot;);</action>
      <tran_glyph conn="2,32,3,1,44,67,42">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="setBrewStrength">
      <entry>BSP_showMsg(&quot;Set the Brew Strength&quot;);</entry>
      <tran trig="BUTTON_DOWN" target="../../7">
       <action>//me-&gt;strength = me-&gt;adval;</action>
       <tran_glyph conn="4,90,3,3,-1,9,1">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="AD_CHANGED">
       <action>ADEvt* evt = (ADEvt*)e;
short newStrength = (evt-&gt;value)/(1024/5);
if( newStrength != me-&gt;strength){
    me-&gt;strength = newStrength;
   // BSP_showTime24H(me-&gt;alarm.time);
}</action>
       <tran_glyph conn="4,88,3,-1,14">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,81,32,12">
       <entry box="1,2,17,2"/>
      </state_glyph>
     </state>
     <state name="showCurrentTime">
      <entry>BSP_showMsg(&quot;Show current time&quot;);</entry>
      <tran trig="BUTTON_DOWN" target="../../5">
       <tran_glyph conn="4,44,3,3,-2,10,2">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <tran trig="TICK">
       <action>Read_RTC(&amp;(me-&gt;current));
BSP_showTime24H(me-&gt;current);</action>
       <tran_glyph conn="4,40,3,-1,9">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,34,32,12">
       <entry box="1,2,5,2"/>
      </state_glyph>
     </state>
     <state name="set_hour">
      <entry>BSP_showMsg(&quot;Set the Hour&quot;);</entry>
      <tran trig="AD_CHANGED">
       <action>ADEvt* evt = (ADEvt*)e;
short newHour = (evt-&gt;value)/(1024/23);
if( newHour != me-&gt;alarm.time.hours){
    me-&gt;alarm.time.hours = newHour;
    BSP_showTime24H(me-&gt;alarm.time);
}</action>
       <tran_glyph conn="4,58,3,-1,14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTON_DOWN" target="../../6">
       <action>//me-&gt;alarm.time.hour = me-&gt;adval;</action>
       <tran_glyph conn="4,62,3,3,-1,5,1">
        <action box="0,-2,11,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,49,32,15">
       <entry box="1,2,5,2"/>
      </state_glyph>
     </state>
     <state name="set_minute">
      <entry>BSP_showMsg(&quot;Set the Minute&quot;);</entry>
      <tran trig="AD_CHANGED">
       <action>ADEvt* evt = (ADEvt*)e;
short newMinutes = (evt-&gt;value)/(1024/59);
if( newMinutes != me-&gt;alarm.time.minutes){
    me-&gt;alarm.time.minutes = newMinutes;
    BSP_showTime24H(me-&gt;alarm.time);
}</action>
       <tran_glyph conn="4,73,3,-1,14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="BUTTON_DOWN" target="../../3">
       <action>//me-&gt;alarm.time.minute = me-&gt;adval;</action>
       <tran_glyph conn="4,77,3,3,-1,9,1">
        <action box="0,-2,11,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,64,32,15">
       <entry box="1,2,5,2"/>
      </state_glyph>
     </state>
     <state name="enableAlarm">
      <entry>BSP_showMsg(&quot;Enable the Alarm?&quot;);</entry>
      <tran trig="BUTTON_DOWN" target="../../4">
       <action>//QEvt *e =  Q_NEW(QEvt, ALARM_ON_SIG);
//QHsm_dispatch(&amp;me-&gt;alarm.super, e);

 //QACTIVE_POST(APP_alarmClock,
  //                       Q_NEW(QEvt, ALARM_ON_SIG), (void *)0);</action>
       <tran_glyph conn="36,99,1,1,2,-59,-2">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="AD_CHANGED">
       <tran_glyph conn="4,102,3,-1,14">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,95,32,12">
       <entry box="1,2,17,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,6,42,103">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="brewing">
     <tran trig="BUTTON_DOWN" target="../../1">
      <tran_glyph conn="68,23,3,1,-24">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TICK">
      <choice target="../../../1">
       <guard>false</guard>
       <choice_glyph conn="79,32,4,1,7,-35">
        <action box="1,0,15,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="68,32,3,-1,11">
       <action box="0,-2,6,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="68,7,56,64"/>
    </state>
    <state name="final">
     <entry brief="terminate">QF_stop(); /* terminate the application */</entry>
     <state_glyph node="57,97,31,8">
      <entry box="1,2,11,2"/>
     </state_glyph>
    </state>
    <state_diagram size="146,111"/>
   </statechart>
  </class>
  <attribute name="APP_alarmClock" type="QActive * const" visibility="0x00" properties="0x00">
   <documentation>Opaque pointer to the single instance of the AlarmClock AO</documentation>
  </attribute>
  <operation name="AlarmClock_ctor" type="void" visibility="0x00" properties="0x00">
   <code>AlarmClock * const me = &amp;l_alarmClock;

QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;AlarmClock_initial));
Alarm_ctor(&amp;me-&gt;alarm); /* orthogonal component ctor */

/* private time event ctor */
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, APP_alarmClock, TICK_SIG, 0U);
button_setAO(&amp;me-&gt;super);
ad_setAO(&amp;me-&gt;super);</code>
  </operation>
 </package>
 <directory name="./src">
  <file name="alarm.h">
   <text>#ifndef alarm_h
#define alarm_h
#include &quot;qp_port.h&quot;
#include &quot;qmbsp.h&quot;

#define Alarm_init(me_)           QHsm_init    ((QHsm *)(me_), (QEvent *)0)

$declare(Components::Alarm)

$declare(Components::Alarm::ctor)

#endif /* alarm_h */</text>
  </file>
  <file name="alarm.c">
   <text>#include &quot;qmbsp.h&quot;
#include &quot;alarm.h&quot;
#include &quot;clock.h&quot;

Q_DEFINE_THIS_FILE

/* Alarm component --------------------*/
$define(Components::Alarm)</text>
  </file>
  <file name="clock.h">
   <text>#ifndef clock_h
#define clock_h

#include &quot;qp_port.h&quot;
#include &quot;alarm.h&quot;


enum AlarmClockSignals {
    TICK_SIG = Q_USER_SIG, /* time tick event */
    BUTTON_DOWN_SIG,
    BUTTON_UP_SIG,
    AD_CHANGED_SIG,
    ALARM_ON_SIG,   /* turn the alarm on */
    ALARM_OFF_SIG,  /* turn the alarm off */
    ALARM_SIG,  /* alarm event from Alarm component to AlarmClock container */
    TIME_SIG,       /* time event sent to Alarm (contains current time) */
    TERMINATE_SIG   /* terminate the application */
};

$declare(Events::TimeEvt)
$declare(Events::ADEvt)

$declare(Components::APP_alarmClock)
$declare(Components::AlarmClock_ctor);

$declare(Components::AlarmClock)

#endif /* clock_h */</text>
  </file>
  <file name="clock.c">
   <text>#include &quot;qmbsp.h&quot;
#include &quot;alarm.h&quot;
#include &quot;clock.h&quot;
#include &quot;button.h&quot;
#include &quot;adc.h&quot;

#include &lt;stdio.h&gt;

Q_DEFINE_THIS_FILE

/* Local objects -----------------------------------------------------------*/
static AlarmClock l_alarmClock; /* the single instance of the AO */

/* Global-scope objects ----------------------------------------------------*/
QActive * const APP_alarmClock = &amp;l_alarmClock.super; /* &quot;opaque&quot; pointer */

$define(Components::AlarmClock_ctor)

/*..........................................................................*/
$define(Components::AlarmClock)</text>
  </file>
 </directory>
</model>
