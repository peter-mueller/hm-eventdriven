; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\clock.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\clock.d --apcs=interwork -O0 --diag_suppress=9931 -I.\src -I..\..\..\..\..\..\..\CPU_Platforms\ARM\ARM7\MCB2300\include -I..\..\..\..\..\..\..\Frameworks\Quantum\qpc_5.3.1\qpc\ports\arm7\Keil -I..\..\..\..\..\..\..\Frameworks\Quantum\qpc_5.3.1\qpc\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips -D__MICROLIB -DQM_TICK -DQM_ActiveObject --omf_browse=.\obj\clock.crf src\clock.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  AlarmClock_final PROC
                  |L1.0|
;;;187    /* @(/2/1/3/2) .............................................................*/
;;;188    QState AlarmClock_final(AlarmClock * const me, QEvt const * const e) {
000000  e92d4070          PUSH     {r4-r6,lr}
000004  e1a05000          MOV      r5,r0
000008  e1a06001          MOV      r6,r1
;;;189        QState status_;
;;;190        switch (e->sig) {
00000c  e1d600b0          LDRH     r0,[r6,#0]
000010  e3500001          CMP      r0,#1
000014  1a000002          BNE      |L1.36|
;;;191            /* @(/2/1/3/2) */
;;;192            case Q_ENTRY_SIG: {
;;;193                QF_stop(); /* terminate the application */
000018  ebfffffe          BL       QF_stop
;;;194                status_ = Q_HANDLED();
00001c  e3a04003          MOV      r4,#3
;;;195                break;
000020  ea000004          B        |L1.56|
                  |L1.36|
;;;196            }
;;;197            default: {
000024  e1a00000          MOV      r0,r0
;;;198                status_ = Q_SUPER(&QHsm_top);
000028  e59f02cc          LDR      r0,|L1.764|
00002c  e5850008          STR      r0,[r5,#8]
000030  e3a04000          MOV      r4,#0
;;;199                break;
000034  e1a00000          MOV      r0,r0
                  |L1.56|
000038  e1a00000          MOV      r0,r0                 ;195
;;;200            }
;;;201        }
;;;202        return status_;
00003c  e1a00004          MOV      r0,r4
000040  e8bd4070          POP      {r4-r6,lr}
;;;203    }
000044  e12fff1e          BX       lr
;;;204    
                          ENDP

                  AlarmClock_mode12h PROC
                  |L1.72|
;;;152    /* @(/2/1/3/1/7) ...........................................................*/
;;;153    QState AlarmClock_mode12h(AlarmClock * const me, QEvt const * const e) {
000048  e92d407c          PUSH     {r2-r6,lr}
00004c  e1a04000          MOV      r4,r0
000050  e1a06001          MOV      r6,r1
;;;154        QState status_;
;;;155        switch (e->sig) {
000054  e1d600b0          LDRH     r0,[r6,#0]
000058  e3500001          CMP      r0,#1
00005c  0a000002          BEQ      |L1.108|
000060  e3500004          CMP      r0,#4
000064  1a00001d          BNE      |L1.224|
000068  ea000004          B        |L1.128|
                  |L1.108|
;;;156            /* @(/2/1/3/1/7) */
;;;157            case Q_ENTRY_SIG: {
00006c  e1a00000          MOV      r0,r0
;;;158                BSP_showMsg("*** 12-hour mode");
000070  e28f0fa2          ADR      r0,|L1.768|
000074  ebfffffe          BL       BSP_showMsg
;;;159                status_ = Q_HANDLED();
000078  e3a05003          MOV      r5,#3
;;;160                break;
00007c  ea00001c          B        |L1.244|
                  |L1.128|
;;;161            }
;;;162            /* @(/2/1/3/1/7/0) */
;;;163            case TICK_SIG: {
000080  e1a00000          MOV      r0,r0
;;;164                TimeEvt pe; /* temporary synchronous event for the component */
;;;165    
;;;166                /* roll over in 12-hr mode? */
;;;167                if (++me->current_time == 12U*60U) {
000084  e594002c          LDR      r0,[r4,#0x2c]
000088  e2800001          ADD      r0,r0,#1
00008c  e584002c          STR      r0,[r4,#0x2c]
000090  e3500e2d          CMP      r0,#0x2d0
000094  1a000001          BNE      |L1.160|
;;;168                    me->current_time = 0U;
000098  e3a00000          MOV      r0,#0
00009c  e584002c          STR      r0,[r4,#0x2c]
                  |L1.160|
;;;169                }
;;;170                BSP_showTime12H("", me->current_time, 60U);
0000a0  e3a0203c          MOV      r2,#0x3c
0000a4  e28f0f99          ADR      r0,|L1.784|
0000a8  e594102c          LDR      r1,[r4,#0x2c]
0000ac  ebfffffe          BL       BSP_showTime12H
;;;171                pe.super.sig = TIME_SIG;
0000b0  e3a0000b          MOV      r0,#0xb
0000b4  e1cd00b0          STRH     r0,[sp,#0]
;;;172                pe.current_time = me->current_time;
0000b8  e594002c          LDR      r0,[r4,#0x2c]
0000bc  e58d0004          STR      r0,[sp,#4]
;;;173    
;;;174                /* (!) synchronously dispatch to the orthogonal component */
;;;175                QHsm_dispatch(&me->alarm.super, &pe.super);
0000c0  e5940030          LDR      r0,[r4,#0x30]
0000c4  e1a0100d          MOV      r1,sp
0000c8  e5902004          LDR      r2,[r0,#4]
0000cc  e2840030          ADD      r0,r4,#0x30
0000d0  e1a0e00f          MOV      lr,pc
0000d4  e12fff12          BX       r2
;;;176    
;;;177                status_ = Q_HANDLED();
0000d8  e3a05003          MOV      r5,#3
;;;178                break;
0000dc  ea000004          B        |L1.244|
                  |L1.224|
;;;179            }
;;;180            default: {
0000e0  e1a00000          MOV      r0,r0
;;;181                status_ = Q_SUPER(&AlarmClock_timekeeping);
0000e4  e59f0228          LDR      r0,|L1.788|
0000e8  e5840008          STR      r0,[r4,#8]
0000ec  e3a05000          MOV      r5,#0
;;;182                break;
0000f0  e1a00000          MOV      r0,r0
                  |L1.244|
0000f4  e1a00000          MOV      r0,r0                 ;160
;;;183            }
;;;184        }
;;;185        return status_;
0000f8  e1a00005          MOV      r0,r5
0000fc  e8bd407c          POP      {r2-r6,lr}
;;;186    }
000100  e12fff1e          BX       lr
;;;187    /* @(/2/1/3/2) .............................................................*/
                          ENDP

                  AlarmClock_mode24h PROC
                  |L1.260|
;;;117    /* @(/2/1/3/1/6) ...........................................................*/
;;;118    QState AlarmClock_mode24h(AlarmClock * const me, QEvt const * const e) {
000104  e92d407c          PUSH     {r2-r6,lr}
000108  e1a04000          MOV      r4,r0
00010c  e1a06001          MOV      r6,r1
;;;119        QState status_;
;;;120        switch (e->sig) {
000110  e1d600b0          LDRH     r0,[r6,#0]
000114  e3500001          CMP      r0,#1
000118  0a000002          BEQ      |L1.296|
00011c  e3500004          CMP      r0,#4
000120  1a00001d          BNE      |L1.412|
000124  ea000004          B        |L1.316|
                  |L1.296|
;;;121            /* @(/2/1/3/1/6) */
;;;122            case Q_ENTRY_SIG: {
000128  e1a00000          MOV      r0,r0
;;;123                BSP_showMsg("*** 24-hour mode");
00012c  e28f0f79          ADR      r0,|L1.792|
000130  ebfffffe          BL       BSP_showMsg
;;;124                status_ = Q_HANDLED();
000134  e3a05003          MOV      r5,#3
;;;125                break;
000138  ea00001c          B        |L1.432|
                  |L1.316|
;;;126            }
;;;127            /* @(/2/1/3/1/6/0) */
;;;128            case TICK_SIG: {
00013c  e1a00000          MOV      r0,r0
;;;129                TimeEvt pe; /* temporary synchronous event for the component */
;;;130    
;;;131                /* roll over in 24-hr mode? */
;;;132                if (++me->current_time == 24U*60U) {
000140  e594002c          LDR      r0,[r4,#0x2c]
000144  e2800001          ADD      r0,r0,#1
000148  e584002c          STR      r0,[r4,#0x2c]
00014c  e3500e5a          CMP      r0,#0x5a0
000150  1a000001          BNE      |L1.348|
;;;133                    me->current_time = 0U;
000154  e3a00000          MOV      r0,#0
000158  e584002c          STR      r0,[r4,#0x2c]
                  |L1.348|
;;;134                }
;;;135                BSP_showTime24H("", me->current_time, 60U);
00015c  e3a0203c          MOV      r2,#0x3c
000160  e28f0f6a          ADR      r0,|L1.784|
000164  e594102c          LDR      r1,[r4,#0x2c]
000168  ebfffffe          BL       BSP_showTime24H
;;;136                pe.super.sig = TIME_SIG;
00016c  e3a0000b          MOV      r0,#0xb
000170  e1cd00b0          STRH     r0,[sp,#0]
;;;137                pe.current_time = me->current_time;
000174  e594002c          LDR      r0,[r4,#0x2c]
000178  e58d0004          STR      r0,[sp,#4]
;;;138    
;;;139                /* (!) synchronously dispatch to the orthogonal component */
;;;140                QHsm_dispatch(&me->alarm.super, &pe.super);
00017c  e5940030          LDR      r0,[r4,#0x30]
000180  e1a0100d          MOV      r1,sp
000184  e5902004          LDR      r2,[r0,#4]
000188  e2840030          ADD      r0,r4,#0x30
00018c  e1a0e00f          MOV      lr,pc
000190  e12fff12          BX       r2
;;;141    
;;;142                status_ = Q_HANDLED();
000194  e3a05003          MOV      r5,#3
;;;143                break;
000198  ea000004          B        |L1.432|
                  |L1.412|
;;;144            }
;;;145            default: {
00019c  e1a00000          MOV      r0,r0
;;;146                status_ = Q_SUPER(&AlarmClock_timekeeping);
0001a0  e59f016c          LDR      r0,|L1.788|
0001a4  e5840008          STR      r0,[r4,#8]
0001a8  e3a05000          MOV      r5,#0
;;;147                break;
0001ac  e1a00000          MOV      r0,r0
                  |L1.432|
0001b0  e1a00000          MOV      r0,r0                 ;125
;;;148            }
;;;149        }
;;;150        return status_;
0001b4  e1a00005          MOV      r0,r5
0001b8  e8bd407c          POP      {r2-r6,lr}
;;;151    }
0001bc  e12fff1e          BX       lr
;;;152    /* @(/2/1/3/1/7) ...........................................................*/
                          ENDP

                  AlarmClock_timekeeping PROC
                  |L1.448|
;;;55     /* @(/2/1/3/1) .............................................................*/
;;;56     QState AlarmClock_timekeeping(AlarmClock * const me, QEvt const * const e) {
0001c0  e92d4070          PUSH     {r4-r6,lr}
0001c4  e1a04000          MOV      r4,r0
0001c8  e1a06001          MOV      r6,r1
;;;57         QState status_;
;;;58         switch (e->sig) {
0001cc  e1d600b0          LDRH     r0,[r6,#0]
0001d0  e350000d          CMP      r0,#0xd
0001d4  308ff100          ADDCC    pc,pc,r0,LSL #2
0001d8  ea00003e          B        |L1.728|
0001dc  ea00003d          B        |L1.728|
0001e0  ea00000a          B        |L1.528|
0001e4  ea000010          B        |L1.556|
0001e8  ea000014          B        |L1.576|
0001ec  ea000039          B        |L1.728|
0001f0  ea000026          B        |L1.656|
0001f4  ea000027          B        |L1.664|
0001f8  ea000027          B        |L1.668|
0001fc  ea00001e          B        |L1.636|
000200  ea000018          B        |L1.616|
000204  ea000012          B        |L1.596|
000208  ea000032          B        |L1.728|
00020c  ea00002a          B        |L1.700|
                  |L1.528|
;;;59             /* @(/2/1/3/1) */
;;;60             case Q_ENTRY_SIG: {
000210  e1a00000          MOV      r0,r0
;;;61                 /* periodic timeout every second */
;;;62                 QTimeEvt_armX(&me->timeEvt, BSP_TICKS_PER_SEC,
000214  e3a02064          MOV      r2,#0x64
000218  e1a01002          MOV      r1,r2
00021c  e2840040          ADD      r0,r4,#0x40
000220  ebfffffe          BL       QTimeEvt_armX
;;;63                                             BSP_TICKS_PER_SEC);
;;;64                 status_ = Q_HANDLED();
000224  e3a05003          MOV      r5,#3
;;;65                 break;
000228  ea00002f          B        |L1.748|
                  |L1.556|
;;;66             }
;;;67             /* @(/2/1/3/1) */
;;;68             case Q_EXIT_SIG: {
00022c  e1a00000          MOV      r0,r0
;;;69                 QTimeEvt_disarm(&me->timeEvt);
000230  e2840040          ADD      r0,r4,#0x40
000234  ebfffffe          BL       QTimeEvt_disarm
;;;70                 status_ = Q_HANDLED();
000238  e3a05003          MOV      r5,#3
;;;71                 break;
00023c  ea00002a          B        |L1.748|
                  |L1.576|
;;;72             }
;;;73             /* @(/2/1/3/1/0) */
;;;74             case Q_INIT_SIG: {
000240  e1a00000          MOV      r0,r0
;;;75                 status_ = Q_TRAN(&AlarmClock_mode24h);
000244  e24f0f52          ADR      r0,|L1.260|
000248  e5840008          STR      r0,[r4,#8]
00024c  e3a05008          MOV      r5,#8
;;;76                 break;
000250  ea000025          B        |L1.748|
                  |L1.596|
;;;77             }
;;;78             /* @(/2/1/3/1/1) */
;;;79             case CLOCK_24H_SIG: {
000254  e1a00000          MOV      r0,r0
;;;80                 status_ = Q_TRAN(&AlarmClock_mode24h);
000258  e24f0f57          ADR      r0,|L1.260|
00025c  e5840008          STR      r0,[r4,#8]
000260  e3a05008          MOV      r5,#8
;;;81                 break;
000264  ea000020          B        |L1.748|
                  |L1.616|
;;;82             }
;;;83             /* @(/2/1/3/1/2) */
;;;84             case CLOCK_12H_SIG: {
000268  e1a00000          MOV      r0,r0
;;;85                 status_ = Q_TRAN(&AlarmClock_mode12h);
00026c  e24f0f8b          ADR      r0,|L1.72|
000270  e5840008          STR      r0,[r4,#8]
000274  e3a05008          MOV      r5,#8
;;;86                 break;
000278  ea00001b          B        |L1.748|
                  |L1.636|
;;;87             }
;;;88             /* @(/2/1/3/1/3) */
;;;89             case ALARM_SIG: {
00027c  e1a00000          MOV      r0,r0
;;;90                 BSP_showMsg("Wake up!!!");
000280  e28f00a4          ADR      r0,|L1.812|
000284  ebfffffe          BL       BSP_showMsg
;;;91                 status_ = Q_HANDLED();
000288  e3a05003          MOV      r5,#3
;;;92                 break;
00028c  ea000016          B        |L1.748|
                  |L1.656|
;;;93             }
;;;94             /* @(/2/1/3/1/4) */
;;;95             case ALARM_SET_SIG: /* intentionally fall through */
000290  e1a00000          MOV      r0,r0
;;;96             case ALARM_ON_SIG: /* intentionally fall through */
000294  e1a00000          MOV      r0,r0
                  |L1.664|
;;;97             case ALARM_OFF_SIG: {
000298  e1a00000          MOV      r0,r0
                  |L1.668|
;;;98     
;;;99                 /* (!) synchronously dispatch to the orthogonal component */
;;;100                QHsm_dispatch(&me->alarm.super, e);
00029c  e5940030          LDR      r0,[r4,#0x30]
0002a0  e1a01006          MOV      r1,r6
0002a4  e5902004          LDR      r2,[r0,#4]
0002a8  e2840030          ADD      r0,r4,#0x30
0002ac  e1a0e00f          MOV      lr,pc
0002b0  e12fff12          BX       r2
;;;101                status_ = Q_HANDLED();
0002b4  e3a05003          MOV      r5,#3
;;;102                break;
0002b8  ea00000b          B        |L1.748|
                  |L1.700|
;;;103            }
;;;104            /* @(/2/1/3/1/5) */
;;;105            case TERMINATE_SIG: {
0002bc  e1a00000          MOV      r0,r0
;;;106                BSP_showMsg("--> final");
0002c0  e28f0070          ADR      r0,|L1.824|
0002c4  ebfffffe          BL       BSP_showMsg
;;;107                status_ = Q_TRAN(&AlarmClock_final);
0002c8  e24f0e2d          ADR      r0,|L1.0|
0002cc  e5840008          STR      r0,[r4,#8]
0002d0  e3a05008          MOV      r5,#8
;;;108                break;
0002d4  ea000004          B        |L1.748|
                  |L1.728|
;;;109            }
;;;110            default: {
0002d8  e1a00000          MOV      r0,r0
;;;111                status_ = Q_SUPER(&QHsm_top);
0002dc  e59f0018          LDR      r0,|L1.764|
0002e0  e5840008          STR      r0,[r4,#8]
0002e4  e3a05000          MOV      r5,#0
;;;112                break;
0002e8  e1a00000          MOV      r0,r0
                  |L1.748|
0002ec  e1a00000          MOV      r0,r0                 ;65
;;;113            }
;;;114        }
;;;115        return status_;
0002f0  e1a00005          MOV      r0,r5
0002f4  e8bd4070          POP      {r4-r6,lr}
;;;116    }
0002f8  e12fff1e          BX       lr
                  |L1.764|
                          DCD      QHsm_top
                  |L1.768|
000300  2a2a2a20          DCB      "*** 12-hour mode"
000304  31322d68
000308  6f757220
00030c  6d6f6465
                  |L1.784|
000310  00                DCB      0
000311  00                DCB      0
000312  00                DCB      0
000313  00                DCB      0
                  |L1.788|
                          DCD      AlarmClock_timekeeping
                  |L1.792|
000318  2a2a2a20          DCB      "*** 24-hour mode",0
00031c  32342d68
000320  6f757220
000324  6d6f6465
000328  00      
000329  00                DCB      0
00032a  00                DCB      0
00032b  00                DCB      0
                  |L1.812|
00032c  57616b65          DCB      "Wake up!!!",0
000330  20757021
000334  212100  
000337  00                DCB      0
                  |L1.824|
000338  2d2d3e20          DCB      "--> final",0
00033c  66696e61
000340  6c00    
000342  00                DCB      0
000343  00                DCB      0
                          ENDP

                  AlarmClock_initial PROC
                  |L1.836|
;;;46     /* @(/2/1/3/0) */
;;;47     QState AlarmClock_initial(AlarmClock * const me, QEvt const * const e) {
000344  e92d4070          PUSH     {r4-r6,lr}
000348  e1a04000          MOV      r4,r0
00034c  e1a05001          MOV      r5,r1
;;;48         (void)e; /* avoid compiler warning about unused parameter */
;;;49         me->current_time = 0U;
000350  e3a00000          MOV      r0,#0
000354  e584002c          STR      r0,[r4,#0x2c]
;;;50     
;;;51         /* (!) trigger the initial transition in the component */
;;;52         Alarm_init(&me->alarm);
000358  e5940030          LDR      r0,[r4,#0x30]
00035c  e3a01000          MOV      r1,#0
000360  e5902000          LDR      r2,[r0,#0]
000364  e2840030          ADD      r0,r4,#0x30
000368  e1a0e00f          MOV      lr,pc
00036c  e12fff12          BX       r2
;;;53         return Q_TRAN(&AlarmClock_timekeeping);
000370  e24f0f6e          ADR      r0,|L1.448|
000374  e5840008          STR      r0,[r4,#8]
000378  e3a00008          MOV      r0,#8
00037c  e8bd4070          POP      {r4-r6,lr}
;;;54     }
000380  e12fff1e          BX       lr
;;;55     /* @(/2/1/3/1) .............................................................*/
                          ENDP

                  AlarmClock_ctor PROC
;;;32     /* @(/2/3) .................................................................*/
;;;33     void AlarmClock_ctor(void) {
000384  e92d4010          PUSH     {r4,lr}
;;;34         AlarmClock * const me = &l_alarmClock;
000388  e59f4030          LDR      r4,|L1.960|
;;;35     
;;;36         QActive_ctor(&me->super, Q_STATE_CAST(&AlarmClock_initial));
00038c  e24f1050          ADR      r1,|L1.836|
000390  e2840000          ADD      r0,r4,#0
000394  ebfffffe          BL       QActive_ctor
;;;37         Alarm_ctor(&me->alarm); /* orthogonal component ctor */
000398  e2840030          ADD      r0,r4,#0x30
00039c  ebfffffe          BL       Alarm_ctor
;;;38     
;;;39         /* private time event ctor */
;;;40         QTimeEvt_ctorX(&me->timeEvt, APP_alarmClock, TICK_SIG, 0U);
0003a0  e3a03000          MOV      r3,#0
0003a4  e3a02004          MOV      r2,#4
0003a8  e59f0014          LDR      r0,|L1.964|
0003ac  e5901000          LDR      r1,[r0,#0]  ; APP_alarmClock
0003b0  e2840040          ADD      r0,r4,#0x40
0003b4  ebfffffe          BL       QTimeEvt_ctorX
;;;41     }
0003b8  e8bd4010          POP      {r4,lr}
0003bc  e12fff1e          BX       lr
;;;42     
                          ENDP

                  |L1.960|
                          DCD      l_alarmClock
                  |L1.964|
                          DCD      APP_alarmClock

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  l_alarmClock
                          %        80

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Q_this_module_
000000  7372635c          DCB      0x73,0x72,0x63,0x5c
000004  636c6f63          DCB      0x63,0x6c,0x6f,0x63
000008  6b2e6300          DCB      0x6b,0x2e,0x63,0x00
                  APP_alarmClock
                          DCD      l_alarmClock
